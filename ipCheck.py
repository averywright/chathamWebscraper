"""import time
import requests
import random

proxy = [
'162.144.233.16:80',
'46.101.49.62:80',
'138.197.102.119:80',
'65.21.131.27:80',
'137.184.100.135:80',
'78.28.152.111:80',
'158.69.52.218:9300',
'116.0.61.122:3128',
'81.12.44.197:3129',
'115.144.100.124:10000',
'1.214.62.71:8000',
'94.100.26.202:80',
'65.0.160.35:8080',
'91.209.11.132:80',
'5.189.184.6:80',
'45.92.108.112:8080',
'82.98.147.36:80',
'117.54.114.99:80',
'212.182.90.118:80',
'93.188.161.84:80',
'54.206.42.168:80',
'51.75.122.80:80',
'8.210.83.33:80',
'198.49.68.80:80',
'78.46.175.184:80',
'143.110.232.177:80',
'212.107.31.118:80',
'119.93.129.34:80',
'157.254.193.139:80',
'23.238.33.186:80',
'190.61.88.147:8080',
'46.209.106.202:3128',
'190.128.228.182:80',
'185.218.125.70:80',
'105.16.115.202:80',
'146.255.100.226:80',
'24.13.39.215:80',
'194.104.158.177:80',
'138.68.235.51:80',
'141.95.122.232:80',
'173.249.198.244:8080',
'109.122.195.14:80',
'104.225.220.233:80',
'45.32.101.24:80',
'8.209.198.247:80',
'103.92.26.190:4002',
'82.180.163.130:80',
'3.108.174.46:80',
'65.108.9.181:80',
'42.98.75.138:80',
'20.210.113.32:80',
'20.206.106.192:80',
'47.241.122.19:80',
'20.24.43.214:80',
'185.162.251.76:80',
'119.237.37.28:80',
'165.154.224.14:80',
'103.155.217.52:41367',
'169.55.89.6:80',
'196.1.97.209:80',
'51.75.141.46:80',
'184.72.36.89:80',
'45.77.198.163:80',
'172.104.155.146:80',
'103.152.9.150:80',
'117.54.114.35:80',
'91.238.103.65:80',
'203.198.207.253:80',
'116.203.254.38:80',
'220.136.144.216:80',
'123.202.159.203:80',
'141.147.33.121:80',
'91.229.114.143:80',
'163.53.18.119:80',
'46.47.197.210:3128',
'146.59.127.168:80',
'108.61.173.226:80',
'91.229.114.153:80',
'117.54.114.100:80',
'200.103.102.18:80',
'125.141.151.83:80',
'158.69.53.98:9300',
'134.209.29.120:3128',
'47.253.105.175:8047',
'207.180.250.238:80',
'209.169.71.193:80',
'182.72.203.246:80',
'47.88.87.74:1080',
'54.243.30.23:80',
'54.235.240.201:80',
'197.255.125.12:80',
'192.236.160.186:80',
'34.239.204.118:80',
'34.87.103.220:80',
'202.173.214.73:80',
'202.173.214.72:80',
'157.245.27.9:3128',
'103.214.201.209:8080',
'43.251.117.134:45787',
'181.209.97.189:9998',
'103.52.37.46:41890',
'144.48.178.113:83',
'196.251.221.2:8104',
'38.49.138.133:999',
'79.116.27.227:80',
'14.207.132.236:8080',
'34.146.64.228:3128',
'43.251.118.134:45787',
'103.155.217.105:41407',
'41.93.71.12:80',
'113.161.131.43:80',
'13.95.173.197:80',
'216.137.184.253:80',
'41.170.12.92:37444',
'103.157.117.227:8080',
'103.251.214.167:6666',
'213.230.127.93:3128',
'185.65.203.218:8080',
'187.217.54.84:80',
'201.217.49.2:80',
'68.183.143.134:80',
'86.18.228.152:80',
'37.9.171.157:80',
'118.26.110.48:8080',
'103.98.135.121:80',
'159.224.243.185:37793',
'103.75.196.121:80',
'117.54.114.98:80',
'3.128.142.113:80',
'18.163.96.231:80',
'3.109.238.5:8080',
'103.155.217.156:41482',
'94.21.200.159:80',
'113.161.114.2:3128',
'124.13.181.6:80',
'13.232.245.132:80',
'103.242.119.88:80',
'46.101.3.81:443',
'31.186.239.246:8080',
'51.159.115.233:3128',
'220.122.126.86:8001',
'200.69.210.59:80',
'141.147.9.254:80',
'103.38.214.21:3128',
'91.234.195.124:80',
'103.152.9.144:80',
'124.13.181.7:80',
'190.52.178.17:80',
'164.92.200.113:80',
'31.186.239.244:8080',
'78.30.230.117:50932',
'91.225.48.111:8888',
'108.170.12.12:80',
'143.198.182.218:80',
'103.156.248.102:8080',
'103.73.158.76:80',
'45.149.43.56:53281',
'104.45.128.122:80',
'138.0.233.33:41890',
'52.51.64.165:8118',
'103.76.151.133:8181',
'75.89.101.63:80',
'182.72.203.243:80',
'216.215.123.174:8080',
'163.44.253.160:80',
'185.33.181.41:80',
'103.123.25.65:80',
'172.106.16.60:3128',
'159.69.245.208:57119',
'41.204.63.118:80',
'190.64.148.26:8087',
'154.236.179.226:1981',
'213.191.194.24:80',
'157.100.53.133:8080',
'41.65.236.43:1976',
'200.105.215.22:33630',
'117.54.114.103:80',
'5.9.139.204:60013',
'89.58.29.103:80',
'51.75.206.209:80',
'47.56.110.204:8989',
'91.126.41.206:80',
'146.59.199.12:80',
'65.108.69.40:10046',
'51.178.18.88:80',
'202.61.192.193:80',
'152.67.99.80:80',
'43.251.117.6:45787',
'94.228.204.225:41890',
'107.152.39.44:8080',
'134.122.58.174:80',
'3.226.168.144:80',
'8.219.169.172:3790',
'45.229.206.15:55555',
'45.229.34.174:999',
'52.41.249.10:80',
'31.207.38.66:80',
'103.155.62.163:8080',
'3.143.37.255:80',
'95.154.104.147:44393',
'195.154.106.167:80',
'138.2.70.213:80',
'103.148.192.83:8089',
'34.81.72.31:80',
'201.229.250.21:8080',
'103.171.182.225:8080',
'93.180.222.134:8080',
'189.250.93.75:80',
'74.208.51.197:5000',
'45.32.245.26:80',
'43.255.113.232:8082',
'146.59.243.214:80',
'103.178.54.149:80',
'51.89.73.43:80',
'20.111.54.16:80',
'20.205.61.143:80',
'23.95.94.41:3128',
'192.248.125.3:80',
'128.111.5.234:3128',
'83.171.248.156:3128',
'152.69.215.206:80',
'195.201.231.22:8080',
'139.99.135.214:80',
'2.58.56.143:8080',
'202.173.214.77:80',
'45.84.241.250:3128',
'20.69.79.158:8443',
'31.186.239.245:8080',
'198.11.175.192:8081',
'13.71.80.224:80',
'185.73.202.85:80',
'191.252.193.200:8080',
'51.222.155.142:80',
'47.245.34.161:8080',
'146.83.128.23:80',
'168.119.119.107:80',
'115.144.102.39:10080',
'51.68.181.108:80',
'149.202.172.113:80',
'47.74.152.29:8888',
'82.146.37.145:80',
'185.233.104.162:80',
'52.24.80.166:80',
'125.17.80.226:8080',
'162.223.94.164:80',
'43.230.202.171:80',
'139.162.78.109:3128',
'102.68.85.187:80',
'152.32.202.108:80',
'137.184.232.148:80',
'174.70.1.210:8080',
'104.223.135.178:10000',
'103.169.255.74:8080',
'49.0.246.130:45554',
'139.59.1.14:3128',
'137.184.197.190:80',
'138.219.244.154:6666',
'45.189.117.74:999',
'45.179.245.1:999',
'157.230.241.133:36835',
'15.206.33.130:1080',
'102.177.192.84:3128',
'193.123.243.148:80',
'68.178.161.107:80',
'202.61.204.51:80',
'51.79.50.22:9300']

ind = random.randint(0,len(proxy)-1)
temp = proxy[ind]
link = "https://httpbin.org/ip"
prox = {'https://': temp, 'http://':temp}
print(prox)
page = requests.get(link, proxies = prox)
print(page.json())


import requests
from random import randint
from re import findall
# rootVIII
# pycodestyle validated
# 2018-2020


class ProxyRequests:
    def __init__(self, url):
        self.url = url
        self.sockets = []
        self.rdata = {
            'headers': {},
            'json': {},
            'status_code': 0,
            'timeout': 3.0,
            'errs': [
                'ConnectTimeout',
                'ProxyError',
                'SSLError',
                'ReadTimeout',
                'ConnectionError',
                'ConnectTimeoutError'
            ]
        }
        self.empty_warn = 'Proxy Pool has been emptied'
        self._acquire_sockets()

    def _acquire_sockets(self):
        r = requests.get('https://www.sslproxies.org/')
        matches = findall(r"<td>\d+\.\d+\.\d+\.\d+</td><td>\d+</td>", r.text)
        revised = [m.replace('<td>', '') for m in matches]
        self.sockets = [s[:-5].replace('</td>', ':') for s in revised]

    def _set_request_data(self, req, socket):
        self.rdata['request'] = req.text
        self.rdata['headers'] = req.headers
        self.rdata['status_code'] = req.status_code
        self.rdata['url'] = req.url
        self.rdata['raw'] = req.content
        self.rdata['proxy'] = socket
        try:
            self.rdata['json'] = req.json()
        except Exception as err:
            self.rdata['json'] = {type(err).__name__: str(err)}

    def _rand_sock(self):
        return randint(0, len(self.sockets) - 1)

    def _is_err(self, err):
        if type(err).__name__ not in self.rdata['errs']:
            raise err

    def _limit_succeeded(self):
        raise Exception(self.empty_warn)

    def get(self):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.get(
                    self.url,
                    timeout=self.rdata['timeout'],
                    proxies=proxies)
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.get()
        else:
            self._limit_succeeded()

    def get_with_headers(self):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.get(
                    self.url,
                    timeout=self.rdata['timeout'],
                    proxies=proxies,
                    headers=self.rdata['headers'])
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.get_with_headers()
        else:
            self._limit_succeeded()

    def post(self, data):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.post(
                    self.url,
                    json=data,
                    timeout=self.rdata['timeout'],
                    proxies=proxies)
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.post(data)
        else:
            self._limit_succeeded()

    def post_with_headers(self, data):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.post(
                    self.url,
                    json=data,
                    timeout=self.rdata['timeout'],
                    headers=self.rdata['headers'],
                    proxies=proxies)
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.post_with_headers(data)
        else:
            self._limit_succeeded()

    def post_file(self):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.post(
                    self.url,
                    proxies=proxies,
                    timeout=self.rdata['timeout'],
                    files={'upload_file': open(self.rdata['file'], 'rb')})
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.post_file()
        else:
            self._limit_succeeded()

    def post_file_with_headers(self):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.post(
                    self.url,
                    files={'upload_file': open(self.rdata['file'], 'rb')},
                    timeout=self.rdata['timeout'],
                    headers=self.rdata['headers'],
                    proxies=proxies)
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.post_file_with_headers()
        else:
            self._limit_succeeded()

    def get_headers(self):
        return self.rdata['headers']

    def set_headers(self, outgoing_headers):
        self.rdata['headers'] = outgoing_headers

    def set_file(self, outgoing_file):
        self.rdata['file'] = outgoing_file

    def get_status_code(self):
        return self.rdata['status_code']

    def get_proxy_used(self):
        return self.rdata['proxy']

    def get_raw(self):
        return self.rdata['raw']

    def get_json(self):
        return self.rdata['json']

    def get_url(self):
        return self.rdata['url']

    def __str__(self):
        return str(self.rdata['request'])


class ProxyRequestsBasicAuth(ProxyRequests):
    def __init__(self, url, username, password):
        super().__init__(url)
        self.username = username
        self.password = password

    def get(self):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.get(
                    self.url,
                    auth=(self.username, self.password),
                    timeout=self.rdata['timeout'],
                    proxies=proxies)
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.get()
        else:
            self._limit_succeeded()

    def get_with_headers(self):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.get(
                    self.url,
                    auth=(self.username, self.password),
                    timeout=self.rdata['timeout'],
                    proxies=proxies,
                    headers=self.rdata['headers'])
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.get_with_headers()
        else:
            self._limit_succeeded()

    def post(self, data):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.post(
                    self.url,
                    json=data,
                    auth=(self.username, self.password),
                    timeout=self.rdata['timeout'],
                    proxies=proxies)
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.post(data)
        else:
            self._limit_succeeded()

    def post_with_headers(self, data):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.post(
                    self.url,
                    json=data,
                    auth=(self.username, self.password),
                    timeout=self.rdata['timeout'],
                    headers=self.rdata['headers'],
                    proxies=proxies)
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.post_with_headers(data)
        else:
            self._limit_succeeded()

    def post_file(self):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.post(
                    self.url,
                    files={'upload_file': open(self.rdata['file'], 'rb')},
                    auth=(self.username, self.password),
                    timeout=self.rdata['timeout'],
                    proxies=proxies)
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.post_file()
        else:
            self._limit_succeeded()

    def post_file_with_headers(self):
        if len(self.sockets) > 0:
            current_socket = self.sockets.pop(self._rand_sock())
            proxies = {
                'http': 'http://' + current_socket,
                'https': 'https://' + current_socket
            }
            try:
                request = requests.post(
                    self.url,
                    files={'upload_file': open(self.rdata['file'], 'rb')},
                    auth=(self.username, self.password),
                    timeout=self.rdata['timeout'],
                    headers=self.rdata['headers'],
                    proxies=proxies)
                self._set_request_data(request, current_socket)
            except Exception as e:
                self._is_err(e)
                self.post_file_with_headers()
        else:
            self._limit_succeeded()

scrape = ProxyRequests("https://httpbin.org/ip")
scrape._acquire_sockets()
scrape.get()
"""

listed = [[28.0, 56.0, 56.0, 35.7, 7.8, 19.0, 0.413, 2.7, 8.1, 0.333, 5.1, 10.9, 0.473, 0.484, 3.0, 3.6, 0.818, 0.9, 3.3, 4.2, 4.9, 1.1, 0.2, 2.1, 1.8, 21.3, 24.0, 62.0, 62.0, 32.9, 5.7, 12.9, 0.442, 2.0, 5.8, 0.35, 3.7, 7.2, 0.516, 0.52, 1.7, 2.3, 0.745, 1.0, 3.8, 4.8, 2.4, 0.9, 1.1, 1.4, 2.7, 15.1, 27.0, 42.0, 34.0, 32.5, 7.4, 17.3, 0.426, 2.2, 7.1, 0.313, 5.1, 10.2, 0.506, 0.491, 3.1, 4.1, 0.759, 1.4, 4.0, 5.4, 1.1, 1.4, 0.4, 1.3, 3.0, 20.1, 32.0, 41.0, 41.0, 31.6, 5.6, 11.8, 0.473, 1.1, 3.3, 0.333, 4.5, 8.5, 0.527, 0.52, 2.5, 3.1, 0.806, 0.8, 3.6, 4.4, 3.9, 0.9, 0.2, 2.0, 1.5, 14.8, 32.0, 56.0, 56.0, 28.5, 4.7, 7.1, 0.669, 0.0, 0.0, 0.0, 4.7, 7.1, 0.669, 0.669, 2.8, 4.6, 0.605, 3.3, 6.3, 9.7, 3.7, 0.6, 0.6, 1.6, 2.9, 12.2, 25.0, 56.0, 21.0, 26.7, 3.9, 8.8, 0.447, 1.2, 3.6, 0.322, 2.8, 5.2, 0.534, 0.513, 1.6, 1.9, 0.846, 0.8, 4.0, 4.8, 2.0, 1.2, 0.5, 1.4, 2.8, 10.6, 25.0, 45.0, 12.0, 25.2, 3.4, 8.0, 0.417, 0.4, 2.0, 0.211, 2.9, 6.0, 0.485, 0.443, 1.4, 1.9, 0.744, 0.4, 2.4, 2.9, 4.6, 1.4, 0.4, 1.4, 2.2, 8.6, 27.0, 7.0, 0.0, 19.1, 2.0, 5.1, 0.389, 0.4, 2.0, 0.214, 1.6, 3.1, 0.5, 0.431, 0.6, 1.0, 0.571, 1.1, 2.3, 3.4, 1.6, 0.6, 0.1, 0.3, 1.9, 5.0, 21.0, 36.0, 11.0, 17.9, 3.4, 5.4, 0.639, 0.0, 0.0, 0.0, 3.4, 5.4, 0.639, 0.639, 1.5, 2.1, 0.711, 2.0, 4.4, 6.5, 0.4, 0.7, 1.1, 0.9, 2.3, 8.4, 25.0, 52.0, 0.0, 17.3, 2.8, 4.7, 0.607, 0.0, 0.0, 0.0, 2.8, 4.7, 0.607, 0.607, 2.0, 2.7, 0.745, 2.3, 3.4, 5.7, 0.4, 0.2, 1.0, 0.8, 2.3, 7.7, 21.0, 36.0, 1.0, 16.1, 1.8, 4.4, 0.414, 0.6, 1.8, 0.333, 1.2, 2.6, 0.468, 0.481, 1.4, 1.6, 0.875, 0.3, 2.1, 2.4, 2.4, 0.8, 0.2, 1.0, 1.0, 5.6, 0.0], [20.0, 61.0, 60.0, 30.2, 5.2, 12.5, 0.418, 1.4, 4.3, 0.332, 3.8, 8.2, 0.462, 0.474, 3.5, 4.8, 0.729, 1.0, 2.9, 3.9, 4.9, 0.9, 0.2, 2.9, 3.1, 15.4, 23.0, 52.0, 30.0, 28.8, 4.7, 11.7, 0.404, 1.9, 5.6, 0.345, 2.8, 6.0, 0.46, 0.488, 3.5, 4.0, 0.861, 1.1, 3.5, 4.7, 1.6, 1.0, 0.2, 1.0, 1.7, 14.8, 21.0, 8.0, 6.0, 25.6, 5.3, 8.9, 0.592, 0.1, 0.8, 0.167, 5.1, 8.1, 0.631, 0.599, 1.3, 2.0, 0.625, 1.9, 5.9, 7.8, 0.8, 0.3, 1.0, 2.3, 3.1, 11.9, 23.0, 31.0, 16.0, 22.7, 4.8, 8.8, 0.54, 0.3, 1.4, 0.238, 4.5, 7.5, 0.595, 0.558, 1.7, 2.5, 0.711, 2.6, 4.3, 6.9, 0.7, 0.5, 0.8, 1.1, 2.0, 11.6, 24.0, 43.0, 13.0, 21.9, 2.0, 4.9, 0.41, 1.4, 3.8, 0.364, 0.7, 1.2, 0.56, 0.55, 0.5, 0.7, 0.786, 0.5, 1.9, 2.4, 0.7, 0.5, 0.5, 0.6, 1.9, 5.9, 31.0, 47.0, 2.0, 17.0, 1.8, 4.5, 0.406, 0.7, 2.1, 0.327, 1.1, 2.4, 0.474, 0.481, 0.8, 1.0, 0.8, 0.2, 1.3, 1.5, 3.3, 0.5, 0.1, 0.8, 1.4, 5.1, 21.0, 6.0, 0.0, 14.8, 1.8, 4.7, 0.393, 0.8, 2.3, 0.357, 1.0, 2.3, 0.429, 0.482, 1.2, 1.3, 0.875, 0.2, 1.7, 1.8, 1.2, 1.2, 0.2, 1.2, 0.8, 5.7, 23.0, 42.0, 1.0, 14.1, 2.0, 4.3, 0.469, 1.0, 2.8, 0.371, 1.0, 1.5, 0.651, 0.589, 0.6, 0.8, 0.788, 0.5, 2.1, 2.6, 0.4, 0.3, 0.3, 0.8, 1.8, 5.6, 25.0, 3.0, 0.0, 12.7, 2.0, 5.0, 0.4, 0.3, 1.3, 0.25, 1.7, 3.7, 0.455, 0.433, 2.7, 3.0, 0.889, 1.7, 0.7, 2.3, 0.3, 0.3, 0.0, 0.7, 1.3, 7.0, 31.0, 25.0, 5.0, 12.4, 1.1, 2.9, 0.384, 0.8, 2.1, 0.385, 0.3, 0.8, 0.381, 0.521, 0.4, 0.6, 0.733, 0.5, 1.0, 1.5, 0.7, 0.3, 0.0, 0.3, 0.8, 3.5, 28.0, 14.0, 3.0, 10.9, 0.9, 2.1, 0.4, 0.1, 0.1, 0.5, 0.8, 2.0, 0.393, 0.417, 0.5, 0.7, 0.7, 0.5, 2.1, 2.6, 0.5, 0.9, 0.6, 0.6, 1.8, 2.3, 0.0], [20.0, 59.0, 59.0, 33.5, 7.3, 17.7, 0.414, 2.5, 7.5, 0.336, 4.8, 10.2, 0.471, 0.485, 4.5, 5.8, 0.78, 0.5, 3.3, 3.8, 3.6, 0.7, 0.3, 2.7, 1.7, 21.7, 34.0, 47.0, 47.0, 30.2, 4.5, 10.2, 0.439, 1.8, 5.2, 0.347, 2.7, 5.0, 0.536, 0.528, 2.3, 2.9, 0.815, 0.3, 1.8, 2.1, 2.9, 0.6, 0.4, 1.8, 1.0, 13.1, 19.0, 62.0, 62.0, 30.0, 4.2, 10.7, 0.389, 1.5, 5.1, 0.296, 2.7, 5.6, 0.474, 0.459, 1.9, 2.5, 0.789, 1.3, 5.6, 6.9, 1.2, 0.5, 0.9, 1.4, 2.9, 11.8, 20.0, 60.0, 57.0, 28.3, 5.8, 10.5, 0.556, 0.2, 0.7, 0.318, 5.6, 9.8, 0.573, 0.567, 2.9, 4.0, 0.738, 3.2, 5.6, 8.8, 3.8, 0.8, 0.9, 2.5, 3.4, 14.8, 22.0, 65.0, 32.0, 26.9, 4.7, 8.4, 0.562, 0.8, 2.6, 0.314, 3.9, 5.8, 0.676, 0.611, 1.7, 2.5, 0.667, 1.5, 4.2, 5.6, 1.6, 0.5, 0.4, 1.2, 1.8, 12.0, 27.0, 25.0, 7.0, 21.5, 3.5, 7.2, 0.481, 0.4, 1.4, 0.306, 3.0, 5.8, 0.524, 0.511, 1.5, 2.1, 0.717, 1.4, 2.2, 3.7, 2.4, 0.6, 0.2, 1.5, 3.3, 8.9, 21.0, 65.0, 3.0, 20.3, 3.5, 7.8, 0.454, 0.7, 2.0, 0.357, 2.8, 5.8, 0.487, 0.499, 1.4, 1.8, 0.748, 2.3, 3.4, 5.7, 1.0, 1.2, 0.6, 1.1, 2.3, 9.2, 20.0, 46.0, 6.0, 16.3, 1.5, 4.2, 0.365, 0.8, 2.5, 0.31, 0.7, 1.7, 0.447, 0.458, 0.5, 0.7, 0.676, 0.3, 1.4, 1.7, 2.6, 0.6, 0.1, 1.4, 1.0, 4.3, 21.0, 29.0, 2.0, 13.8, 1.9, 5.3, 0.359, 0.6, 2.6, 0.224, 1.3, 2.7, 0.494, 0.415, 0.3, 0.6, 0.625, 0.1, 1.3, 1.4, 1.6, 0.4, 0.1, 0.5, 0.9, 4.7, 26.0, 45.0, 0.0, 13.4, 1.3, 3.8, 0.353, 1.2, 3.4, 0.342, 0.2, 0.3, 0.467, 0.509, 0.9, 1.0, 0.911, 0.2, 1.2, 1.4, 0.5, 0.5, 0.1, 0.4, 1.2, 4.8, 20.0, 58.0, 1.0, 13.3, 1.3, 2.4, 0.54, 0.4, 0.7, 0.553, 0.9, 1.7, 0.535, 0.617, 0.4, 0.7, 0.595, 1.6, 2.8, 4.4, 0.9, 0.7, 0.4, 0.6, 1.8, 3.3, 0.0], [22.0, 53.0, 53.0, 33.6, 7.3, 15.0, 0.489, 2.9, 7.2, 0.407, 4.4, 7.8, 0.566, 0.587, 3.0, 3.5, 0.864, 0.6, 3.1, 3.7, 10.3, 1.7, 0.5, 2.5, 1.2, 20.6, 30.0, 66.0, 66.0, 31.9, 6.1, 13.3, 0.457, 3.7, 8.7, 0.427, 2.4, 4.6, 0.515, 0.597, 1.4, 1.6, 0.833, 0.9, 4.1, 5.0, 2.7, 1.2, 0.3, 1.8, 2.0, 17.3, 26.0, 56.0, 56.0, 29.7, 6.5, 11.9, 0.547, 1.6, 4.1, 0.388, 4.9, 7.7, 0.632, 0.614, 3.4, 4.3, 0.778, 1.5, 6.2, 7.6, 1.3, 0.6, 2.3, 1.7, 3.4, 17.9, 20.0, 66.0, 6.0, 28.1, 5.4, 12.5, 0.429, 1.3, 4.2, 0.317, 4.0, 8.3, 0.485, 0.482, 4.8, 5.8, 0.828, 1.1, 3.0, 4.1, 1.4, 0.6, 0.1, 1.8, 2.0, 16.9, 23.0, 59.0, 47.0, 26.7, 3.1, 7.5, 0.414, 1.2, 3.5, 0.329, 1.9, 4.0, 0.489, 0.491, 0.5, 0.6, 0.833, 0.5, 2.2, 2.7, 3.9, 1.0, 0.2, 1.6, 2.5, 7.9, 24.0, 8.0, 2.0, 20.3, 4.1, 8.8, 0.471, 1.4, 3.8, 0.367, 2.8, 5.0, 0.55, 0.55, 0.8, 1.3, 0.6, 0.6, 3.0, 3.6, 2.1, 0.6, 0.1, 0.6, 1.1, 10.4, 30.0, 63.0, 6.0, 19.6, 3.4, 6.4, 0.527, 0.3, 0.7, 0.409, 3.1, 5.7, 0.542, 0.55, 0.7, 0.8, 0.846, 0.6, 2.4, 3.0, 5.0, 1.1, 0.1, 1.7, 1.3, 7.7, 25.0, 42.0, 10.0, 19.3, 2.7, 7.2, 0.377, 1.2, 3.7, 0.318, 1.5, 3.5, 0.441, 0.46, 1.3, 1.6, 0.836, 0.4, 2.1, 2.5, 1.4, 0.5, 0.2, 0.9, 1.5, 8.0, 22.0, 54.0, 28.0, 18.2, 3.4, 7.4, 0.466, 0.8, 2.9, 0.283, 2.6, 4.4, 0.588, 0.523, 1.5, 1.9, 0.769, 1.8, 3.9, 5.6, 0.9, 0.3, 0.9, 1.1, 2.1, 9.2, 24.0, 51.0, 1.0, 16.0, 1.8, 4.5, 0.4, 0.8, 2.4, 0.339, 1.0, 2.1, 0.472, 0.491, 1.2, 1.7, 0.697, 0.9, 2.4, 3.3, 0.5, 0.5, 0.2, 0.4, 1.3, 5.6, 30.0, 7.0, 1.0, 15.6, 3.0, 6.3, 0.477, 0.3, 1.6, 0.182, 2.7, 4.7, 0.576, 0.5, 0.7, 1.7, 0.417, 1.0, 2.1, 3.1, 1.3, 0.3, 0.9, 0.4, 1.0, 7.0, 0.0], [25.0, 59.0, 59.0, 34.4, 8.6, 16.7, 0.512, 3.0, 7.4, 0.408, 5.5, 9.3, 0.596, 0.603, 5.2, 5.9, 0.869, 1.9, 6.6, 8.5, 1.8, 0.6, 0.6, 1.9, 2.1, 25.3, 35.0, 43.0, 42.0, 29.7, 3.6, 8.7, 0.408, 1.8, 5.0, 0.362, 1.8, 3.8, 0.469, 0.511, 1.8, 2.2, 0.813, 0.4, 2.1, 2.5, 7.7, 1.0, 0.2, 1.7, 2.2, 10.7, 31.0, 54.0, 54.0, 28.2, 3.9, 8.0, 0.492, 1.4, 3.5, 0.397, 2.5, 4.5, 0.566, 0.579, 2.9, 3.4, 0.837, 1.3, 4.3, 5.6, 3.2, 0.9, 0.6, 2.3, 3.6, 12.1, 26.0, 55.0, 13.0, 26.8, 4.8, 12.2, 0.396, 3.1, 8.6, 0.359, 1.7, 3.6, 0.485, 0.522, 0.7, 0.8, 0.841, 0.5, 3.1, 3.6, 1.7, 0.8, 0.1, 1.1, 1.4, 13.4, 23.0, 52.0, 41.0, 24.1, 3.3, 6.0, 0.556, 0.4, 1.1, 0.333, 3.0, 4.9, 0.606, 0.587, 1.3, 2.0, 0.657, 2.3, 5.5, 7.9, 2.7, 1.0, 0.3, 1.3, 2.6, 8.3, 28.0, 6.0, 0.0, 23.3, 5.3, 9.8, 0.542, 1.2, 2.7, 0.438, 4.2, 7.2, 0.581, 0.602, 0.8, 1.2, 0.714, 0.7, 3.5, 4.2, 4.3, 1.7, 0.5, 1.3, 3.0, 12.7, 22.0, 52.0, 7.0, 17.8, 3.0, 7.4, 0.41, 0.8, 2.7, 0.277, 2.3, 4.7, 0.488, 0.461, 1.4, 1.9, 0.755, 0.4, 2.3, 2.8, 3.0, 0.6, 0.5, 1.7, 1.6, 8.2, 22.0, 43.0, 6.0, 16.6, 2.0, 4.4, 0.444, 1.0, 2.8, 0.361, 1.0, 1.6, 0.586, 0.558, 0.5, 0.7, 0.724, 0.6, 1.1, 1.7, 0.7, 0.2, 0.1, 0.4, 1.5, 5.4, 27.0, 5.0, 0.0, 15.6, 2.0, 2.6, 0.769, 0.2, 0.2, 1.0, 1.8, 2.4, 0.75, 0.808, 0.8, 1.0, 0.8, 1.2, 2.6, 3.8, 0.6, 0.0, 1.2, 0.6, 2.2, 5.0, 24.0, 36.0, 3.0, 14.7, 2.3, 4.7, 0.488, 1.0, 2.4, 0.402, 1.3, 2.3, 0.578, 0.591, 0.8, 1.1, 0.692, 0.2, 1.4, 1.6, 2.1, 0.7, 0.4, 1.3, 1.6, 6.3, 36.0, 50.0, 0.0, 14.6, 1.9, 5.0, 0.383, 0.5, 2.2, 0.236, 1.4, 2.8, 0.5, 0.435, 0.7, 0.8, 0.881, 0.6, 2.4, 3.1, 1.0, 0.4, 0.3, 0.7, 1.3, 5.1, 0.0], [20.0, 59.0, 59.0, 33.7, 6.6, 15.7, 0.423, 1.1, 4.1, 0.275, 5.5, 11.6, 0.474, 0.458, 5.6, 7.5, 0.747, 1.1, 5.4, 6.6, 3.6, 0.9, 0.5, 2.7, 2.3, 20.0, 21.0, 65.0, 65.0, 32.9, 6.8, 14.0, 0.487, 1.7, 4.6, 0.37, 5.1, 9.4, 0.544, 0.548, 3.5, 4.1, 0.836, 0.9, 3.0, 3.9, 3.5, 0.9, 0.2, 2.1, 2.3, 18.8, 24.0, 45.0, 45.0, 29.6, 5.5, 10.9, 0.506, 0.4, 1.3, 0.3, 5.1, 9.6, 0.535, 0.524, 1.9, 2.4, 0.791, 1.2, 2.8, 4.0, 5.5, 1.5, 0.4, 2.4, 2.1, 13.4, 22.0, 46.0, 3.0, 25.2, 4.3, 9.7, 0.445, 1.1, 3.3, 0.336, 3.2, 6.4, 0.502, 0.502, 2.5, 2.9, 0.88, 0.6, 3.9, 4.5, 4.1, 0.6, 0.6, 1.5, 2.5, 12.3, 28.0, 35.0, 29.0, 24.8, 2.9, 6.3, 0.468, 1.8, 4.2, 0.435, 1.1, 2.1, 0.534, 0.614, 0.7, 0.8, 0.893, 0.5, 1.7, 2.2, 1.2, 0.9, 0.1, 0.6, 2.0, 8.4, 21.0, 41.0, 16.0, 23.6, 3.4, 8.1, 0.414, 1.1, 3.6, 0.306, 2.3, 4.5, 0.5, 0.482, 1.6, 2.2, 0.711, 1.0, 1.9, 2.9, 3.2, 1.2, 0.5, 1.9, 2.4, 9.4, 31.0, 42.0, 9.0, 22.5, 3.1, 7.1, 0.431, 1.5, 3.8, 0.381, 1.6, 3.3, 0.489, 0.533, 0.4, 0.5, 0.75, 0.2, 1.8, 2.0, 1.3, 0.6, 0.2, 0.9, 1.3, 8.0, 23.0, 61.0, 32.0, 22.3, 4.0, 7.0, 0.57, 0.5, 1.5, 0.312, 3.5, 5.5, 0.642, 0.604, 1.1, 1.5, 0.745, 1.1, 4.9, 6.0, 0.9, 0.4, 1.3, 1.7, 1.3, 9.6, 25.0, 45.0, 16.0, 20.9, 3.7, 7.4, 0.499, 1.0, 3.2, 0.313, 2.7, 4.2, 0.639, 0.566, 2.8, 3.3, 0.846, 1.3, 3.4, 4.7, 1.6, 0.8, 0.2, 1.2, 2.7, 11.2, 24.0, 21.0, 7.0, 19.5, 1.6, 4.4, 0.37, 1.0, 3.0, 0.313, 0.7, 1.3, 0.5, 0.478, 0.8, 1.0, 0.762, 1.0, 2.7, 3.7, 1.2, 0.6, 0.4, 0.5, 1.6, 5.0, 20.0, 38.0, 2.0, 15.8, 1.4, 3.5, 0.398, 0.9, 2.5, 0.379, 0.4, 1.0, 0.447, 0.534, 0.3, 0.3, 0.846, 0.7, 1.5, 2.2, 0.5, 0.2, 0.1, 0.3, 1.4, 4.0, 0.0], [34.0, 40.0, 40.0, 34.5, 9.9, 19.9, 0.496, 5.0, 11.6, 0.433, 4.9, 8.3, 0.584, 0.622, 5.0, 5.4, 0.925, 0.6, 5.7, 6.2, 6.4, 1.0, 0.4, 3.3, 2.2, 29.7, 32.0, 54.0, 54.0, 32.8, 7.9, 18.4, 0.432, 4.4, 10.7, 0.408, 3.6, 7.7, 0.465, 0.55, 1.9, 2.1, 0.895, 0.6, 3.4, 4.1, 2.5, 0.7, 0.4, 1.8, 1.9, 22.1, 32.0, 58.0, 58.0, 31.4, 3.3, 6.3, 0.532, 0.6, 1.8, 0.33, 2.8, 4.5, 0.611, 0.578, 1.1, 1.5, 0.685, 0.8, 6.5, 7.3, 6.8, 0.9, 0.8, 2.6, 3.1, 8.3, 23.0, 66.0, 41.0, 30.8, 6.9, 16.1, 0.427, 2.6, 8.0, 0.325, 4.3, 8.1, 0.528, 0.508, 4.3, 4.9, 0.867, 0.4, 2.4, 2.8, 4.6, 0.8, 0.2, 3.2, 2.7, 20.7, 26.0, 56.0, 21.0, 26.3, 3.2, 7.4, 0.43, 2.1, 5.2, 0.41, 1.1, 2.2, 0.476, 0.574, 0.8, 0.9, 0.843, 1.1, 3.4, 4.4, 3.4, 1.4, 0.2, 1.5, 1.9, 9.3, 25.0, 50.0, 3.0, 20.1, 2.5, 5.3, 0.475, 1.3, 3.5, 0.379, 1.2, 1.8, 0.659, 0.6, 0.7, 0.9, 0.733, 0.9, 2.5, 3.4, 1.7, 0.5, 0.3, 0.9, 2.3, 7.0, 25.0, 42.0, 2.0, 18.5, 2.7, 5.5, 0.494, 0.8, 2.0, 0.381, 2.0, 3.5, 0.557, 0.562, 0.9, 0.9, 0.923, 0.2, 1.6, 1.8, 3.1, 0.5, 0.1, 0.7, 1.5, 7.1, 32.0, 46.0, 1.0, 14.0, 2.3, 4.4, 0.525, 0.7, 1.9, 0.36, 1.6, 2.5, 0.652, 0.603, 0.9, 1.2, 0.737, 1.3, 2.5, 3.7, 0.9, 0.4, 0.4, 1.1, 1.9, 6.3, 20.0, 50.0, 3.0, 13.4, 1.6, 3.7, 0.435, 0.8, 2.3, 0.336, 0.8, 1.4, 0.603, 0.541, 0.6, 0.9, 0.727, 0.4, 1.1, 1.6, 0.8, 0.3, 0.1, 0.6, 0.8, 4.6, 21.0, 21.0, 0.0, 12.5, 2.8, 4.5, 0.628, 0.0, 0.1, 0.5, 2.8, 4.4, 0.63, 0.633, 1.2, 1.8, 0.684, 0.9, 2.6, 3.5, 0.7, 0.1, 0.3, 0.7, 1.9, 6.9, 20.0, 22.0, 0.0, 8.5, 1.7, 4.1, 0.418, 1.3, 3.2, 0.414, 0.4, 1.0, 0.429, 0.577, 0.2, 0.3, 0.667, 0.0, 1.5, 1.5, 0.3, 0.3, 0.1, 0.4, 0.5, 5.0, 0.0], [24.0, 42.0, 42.0, 31.2, 7.5, 16.1, 0.467, 2.9, 7.1, 0.411, 4.6, 9.0, 0.511, 0.558, 3.2, 3.5, 0.899, 0.7, 4.3, 5.0, 4.1, 1.0, 0.4, 2.1, 2.5, 21.2, 27.0, 58.0, 58.0, 30.3, 5.4, 13.9, 0.387, 1.9, 5.8, 0.319, 3.5, 8.1, 0.437, 0.454, 1.7, 2.2, 0.794, 0.6, 2.6, 3.2, 2.5, 0.8, 0.2, 1.5, 3.3, 14.4, 23.0, 47.0, 47.0, 27.6, 6.0, 12.3, 0.492, 1.5, 4.4, 0.34, 4.5, 7.8, 0.579, 0.554, 3.4, 4.4, 0.785, 1.6, 4.9, 6.6, 0.8, 1.1, 3.2, 1.5, 3.5, 17.0, 26.0, 64.0, 11.0, 23.0, 3.7, 8.5, 0.435, 1.5, 3.9, 0.383, 2.2, 4.7, 0.478, 0.522, 1.0, 1.2, 0.818, 0.4, 1.8, 2.2, 4.6, 1.0, 0.1, 0.9, 0.4, 9.9, 26.0, 8.0, 0.0, 22.0, 2.1, 5.3, 0.405, 2.0, 4.0, 0.5, 0.1, 1.3, 0.1, 0.595, 1.0, 1.0, 1.0, 0.1, 2.3, 2.4, 2.0, 0.1, 0.0, 0.6, 1.5, 7.3, 22.0, 61.0, 18.0, 21.9, 3.3, 7.0, 0.473, 1.3, 3.6, 0.36, 2.0, 3.3, 0.596, 0.567, 1.3, 1.8, 0.714, 1.0, 3.6, 4.5, 1.2, 0.6, 0.7, 0.7, 2.0, 9.2, 26.0, 56.0, 22.0, 21.6, 2.1, 4.8, 0.437, 1.0, 2.7, 0.36, 1.1, 2.1, 0.533, 0.537, 0.5, 0.6, 0.839, 0.8, 3.6, 4.5, 1.4, 1.0, 0.3, 0.5, 1.5, 5.6, 24.0, 45.0, 14.0, 17.2, 2.6, 4.4, 0.581, 0.1, 0.3, 0.267, 2.5, 4.1, 0.607, 0.591, 0.8, 1.6, 0.529, 1.9, 2.7, 4.6, 1.4, 0.9, 0.4, 0.6, 1.5, 6.0, 21.0, 52.0, 2.0, 16.8, 2.3, 5.5, 0.42, 0.8, 2.8, 0.285, 1.5, 2.7, 0.556, 0.491, 0.6, 1.0, 0.64, 0.6, 1.9, 2.5, 0.7, 0.5, 0.2, 0.9, 1.5, 6.0, 21.0, 33.0, 3.0, 15.4, 2.1, 5.0, 0.41, 0.6, 2.5, 0.238, 1.5, 2.5, 0.585, 0.47, 0.4, 0.5, 0.765, 0.4, 1.8, 2.2, 0.8, 0.4, 0.2, 0.9, 1.7, 5.1, 35.0, 3.0, 0.0, 14.3, 1.0, 3.7, 0.273, 1.0, 2.7, 0.375, 0.0, 1.0, 0.0, 0.409, 0.0, 0.0, 0.0, 0.3, 1.0, 1.3, 0.7, 0.3, 0.0, 1.0, 2.0, 3.0, 0.0], [], [34.0, 64.0, 64.0, 30.3, 5.8, 11.2, 0.514, 1.8, 4.8, 0.382, 3.9, 6.4, 0.614, 0.596, 1.7, 2.3, 0.766, 2.0, 4.6, 6.6, 1.3, 0.5, 2.4, 1.4, 2.5, 15.1, 27.0, 61.0, 59.0, 27.7, 3.5, 7.8, 0.448, 2.1, 5.0, 0.412, 1.4, 2.7, 0.515, 0.581, 1.6, 1.8, 0.899, 0.9, 2.4, 3.3, 2.4, 0.8, 0.2, 1.0, 1.7, 10.6, 27.0, 54.0, 16.0, 25.9, 5.7, 11.4, 0.497, 1.1, 3.4, 0.333, 4.5, 8.0, 0.567, 0.547, 1.2, 1.5, 0.825, 2.4, 7.3, 9.7, 1.7, 0.4, 0.2, 1.2, 1.7, 13.7, 30.0, 47.0, 29.0, 24.8, 2.8, 7.4, 0.384, 1.9, 5.7, 0.341, 0.9, 1.7, 0.532, 0.516, 0.5, 0.7, 0.657, 0.8, 4.2, 5.0, 1.3, 0.7, 0.1, 0.6, 1.1, 8.1, 27.0, 65.0, 34.0, 22.6, 3.0, 6.8, 0.437, 1.7, 3.9, 0.429, 1.3, 2.9, 0.449, 0.56, 0.4, 0.6, 0.806, 0.5, 2.2, 2.7, 2.5, 0.9, 0.4, 1.1, 2.0, 8.0, 35.0, 32.0, 0.0, 22.5, 2.3, 5.6, 0.419, 1.6, 4.4, 0.371, 0.7, 1.2, 0.59, 0.564, 0.4, 0.5, 0.824, 0.3, 2.6, 2.9, 3.0, 0.6, 0.2, 1.2, 1.8, 6.8, 31.0, 22.0, 8.0, 22.2, 4.8, 11.3, 0.423, 1.4, 4.6, 0.294, 3.4, 6.6, 0.514, 0.484, 2.8, 3.1, 0.912, 0.7, 3.4, 4.1, 4.4, 0.7, 0.1, 2.1, 2.1, 13.7, 36.0, 35.0, 0.0, 19.1, 1.7, 3.8, 0.447, 0.7, 2.1, 0.311, 1.0, 1.7, 0.621, 0.534, 1.0, 1.3, 0.739, 0.4, 1.5, 1.9, 2.5, 0.5, 0.1, 0.8, 1.2, 5.0, 24.0, 38.0, 3.0, 15.7, 2.0, 5.2, 0.386, 1.1, 2.7, 0.392, 0.9, 2.5, 0.379, 0.487, 1.0, 1.1, 0.86, 0.8, 2.3, 3.1, 1.0, 0.3, 0.2, 0.9, 0.9, 6.0, 22.0, 41.0, 9.0, 14.0, 2.0, 5.0, 0.39, 0.9, 2.9, 0.317, 1.0, 2.1, 0.494, 0.483, 0.5, 0.7, 0.724, 0.8, 1.4, 2.2, 0.6, 0.4, 0.1, 0.9, 1.5, 5.3, 33.0, 16.0, 0.0, 11.6, 1.6, 3.4, 0.481, 0.4, 1.1, 0.333, 1.3, 2.3, 0.556, 0.537, 0.5, 0.8, 0.615, 0.9, 1.8, 2.8, 0.3, 0.1, 0.4, 0.7, 1.4, 4.1, 0.0], [28.0, 67.0, 67.0, 36.0, 8.6, 18.5, 0.465, 2.9, 8.3, 0.353, 5.7, 10.2, 0.556, 0.544, 5.2, 6.8, 0.757, 2.0, 8.4, 10.4, 4.1, 0.6, 0.3, 2.8, 3.0, 25.3, 22.0, 60.0, 60.0, 34.2, 7.0, 16.2, 0.431, 1.8, 5.4, 0.326, 5.2, 10.8, 0.484, 0.486, 4.0, 5.3, 0.748, 0.9, 4.3, 5.2, 2.8, 0.5, 0.2, 2.3, 2.6, 19.7, 22.0, 56.0, 51.0, 29.4, 3.5, 7.8, 0.446, 1.9, 5.2, 0.357, 1.6, 2.6, 0.623, 0.565, 1.1, 1.4, 0.792, 0.7, 2.5, 3.2, 1.9, 0.6, 0.4, 1.0, 2.5, 9.9, 27.0, 10.0, 0.0, 28.9, 4.0, 6.5, 0.615, 1.4, 2.3, 0.609, 2.6, 4.2, 0.619, 0.723, 1.8, 2.7, 0.667, 1.2, 4.7, 5.9, 3.1, 1.1, 0.5, 1.4, 3.0, 11.2, 23.0, 66.0, 12.0, 28.2, 4.7, 10.6, 0.447, 1.9, 5.2, 0.364, 2.8, 5.4, 0.527, 0.536, 2.1, 2.5, 0.819, 0.7, 3.4, 4.0, 3.2, 0.9, 0.2, 1.1, 2.0, 13.4, 24.0, 45.0, 44.0, 27.6, 3.4, 4.8, 0.71, 0.0, 0.0, 0.0, 3.4, 4.8, 0.71, 0.71, 1.0, 2.0, 0.478, 4.2, 5.0, 9.2, 0.8, 0.9, 1.7, 0.6, 2.9, 7.7, 23.0, 20.0, 8.0, 21.9, 3.1, 6.8, 0.449, 0.9, 2.8, 0.304, 2.2, 4.0, 0.55, 0.511, 1.5, 1.7, 0.879, 0.4, 1.2, 1.6, 1.0, 0.8, 0.4, 0.8, 1.6, 8.4, 24.0, 67.0, 7.0, 19.3, 2.1, 4.1, 0.52, 0.1, 0.5, 0.235, 2.0, 3.6, 0.561, 0.535, 0.6, 0.8, 0.75, 2.7, 3.8, 6.5, 0.9, 0.5, 0.8, 0.8, 2.6, 5.0, 30.0, 23.0, 7.0, 18.0, 2.3, 6.6, 0.351, 1.4, 4.4, 0.324, 0.9, 2.1, 0.408, 0.46, 0.8, 0.9, 0.857, 0.2, 1.8, 2.0, 1.5, 0.6, 0.1, 0.8, 1.9, 6.8, 24.0, 49.0, 16.0, 15.8, 1.6, 2.1, 0.769, 0.0, 0.0, 0.0, 1.6, 2.1, 0.777, 0.769, 0.2, 0.3, 0.75, 1.9, 2.8, 4.7, 0.5, 0.3, 0.6, 0.5, 1.9, 3.5, 24.0, 52.0, 0.0, 14.6, 2.2, 5.5, 0.408, 1.1, 3.3, 0.331, 1.2, 2.2, 0.522, 0.507, 0.5, 0.7, 0.771, 0.5, 2.4, 2.9, 0.8, 0.3, 0.2, 0.5, 1.0, 6.1, 0.0], [26.0, 62.0, 62.0, 34.5, 7.2, 11.7, 0.615, 0.4, 1.1, 0.366, 6.8, 10.5, 0.643, 0.633, 4.2, 5.4, 0.766, 3.0, 9.3, 12.3, 7.0, 0.8, 0.5, 3.0, 3.7, 18.9, 25.0, 57.0, 57.0, 34.2, 9.5, 18.4, 0.515, 1.5, 4.7, 0.326, 7.9, 13.7, 0.58, 0.557, 5.0, 6.3, 0.789, 0.5, 3.8, 4.3, 6.3, 1.1, 0.3, 2.7, 2.5, 25.5, 30.0, 64.0, 64.0, 32.8, 4.6, 9.8, 0.474, 1.7, 4.4, 0.375, 3.0, 5.3, 0.557, 0.559, 4.2, 5.0, 0.843, 1.0, 3.7, 4.7, 1.6, 0.7, 0.2, 1.1, 1.3, 15.1, 24.0, 61.0, 61.0, 30.2, 5.6, 11.4, 0.489, 2.7, 6.7, 0.401, 2.9, 4.7, 0.614, 0.607, 1.3, 1.9, 0.699, 0.6, 2.7, 3.3, 3.0, 1.1, 0.3, 1.4, 2.5, 15.1, 22.0, 62.0, 60.0, 29.8, 4.3, 9.6, 0.447, 2.5, 6.0, 0.409, 1.8, 3.6, 0.511, 0.576, 0.9, 1.1, 0.803, 1.1, 3.5, 4.6, 1.2, 0.8, 0.5, 0.8, 1.9, 11.9, 24.0, 61.0, 0.0, 22.5, 4.7, 10.4, 0.452, 1.7, 5.0, 0.337, 3.0, 5.4, 0.559, 0.533, 2.5, 2.8, 0.899, 0.5, 2.1, 2.5, 3.9, 0.6, 0.2, 2.0, 1.6, 13.6, 24.0, 63.0, 7.0, 18.1, 2.3, 5.0, 0.463, 0.8, 2.4, 0.34, 1.5, 2.6, 0.577, 0.545, 0.3, 0.4, 0.8, 0.2, 1.1, 1.3, 2.2, 0.5, 0.2, 0.8, 1.4, 5.7, 27.0, 58.0, 0.0, 16.3, 2.6, 5.4, 0.487, 1.2, 3.1, 0.374, 1.5, 2.3, 0.639, 0.595, 1.3, 1.7, 0.788, 0.9, 2.9, 3.8, 0.9, 0.3, 0.5, 0.8, 1.3, 7.7, 25.0, 51.0, 4.0, 13.4, 2.5, 5.6, 0.437, 1.4, 3.6, 0.371, 1.1, 2.0, 0.56, 0.558, 0.6, 0.7, 0.886, 0.4, 1.9, 2.3, 1.2, 0.7, 0.2, 0.9, 1.8, 6.9, 25.0, 51.0, 0.0, 11.1, 2.1, 3.5, 0.61, 0.2, 0.6, 0.25, 2.0, 2.8, 0.69, 0.633, 0.6, 0.9, 0.733, 0.8, 2.4, 3.2, 0.7, 0.3, 0.3, 0.5, 1.3, 5.0, 22.0, 3.0, 0.0, 9.3, 0.3, 2.0, 0.167, 0.3, 1.0, 0.333, 0.0, 1.0, 0.0, 0.25, 0.0, 0.0, 0.0, 0.3, 1.3, 1.7, 1.0, 0.3, 0.0, 0.0, 0.3, 1.0, 0.0]]
for i in listed:
    with open("randomfile.csv", "a") as o:
        o.write(str(i))

